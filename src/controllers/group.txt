import { Server } from "socket.io";
import http from "http";
import express from "express";

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: { origin: "*" }, // Allow all origins for testing
});

io.on("connection", (socket) => {
    console.log(`User connected: ${socket.id}`);

    // Handle joining a room
    socket.on("joinRoom", (roomName) => {
        socket.join(roomName);
        console.log(`${socket.id} joined room: ${roomName}`);

        // Notify the room that a new user has joined
        io.to(roomName).emit("message", {
            sender: "System",
            text: `${socket.id} has joined the room.`,
        });
    });

    // Handle sending a message to a room
    socket.on("groupMessage", ({ roomName, message }) => {
        console.log(`Message in ${roomName} from ${socket.id}: ${message}`);

        // Broadcast message to everyone in the room (including sender)
        io.to(roomName).emit("message", {
            sender: socket.id,
            text: message,
        });
    });

    // Handle leaving a room
    socket.on("leaveRoom", (roomName) => {
        socket.leave(roomName);
        console.log(`${socket.id} left room: ${roomName}`);

        io.to(roomName).emit("message", {
            sender: "System",
            text: `${socket.id} has left the room.`,
        });
    });

    // Handle disconnection
    socket.on("disconnect", () => {
        console.log(`User disconnected: ${socket.id}`);
    });
});

// Start server
server.listen(3000, () => console.log("Server running on port 3000"));
const socket = io("http://localhost:3000");

// Join a specific chat room
socket.emit("joinRoom", "Web3Chat");

// Send a message to the group chat
socket.emit("groupMessage", { roomName: "Web3Chat", message: "Hello everyone!" });

// Listen for messages in the room
socket.on("message", (data) => {
    console.log(`${data.sender}: ${data.text}`);
});

// Leave the room
socket.emit("leaveRoom", "Web3Chat");
import mongoose, { Schema, Document } from "mongoose";

// Interface for messages in a chat
interface IMessage extends Document {
    sender: mongoose.Types.ObjectId; // Reference to User
    room: string; // Room name
    message: string;
    timestamp: Date;
}

// Chat Schema
const chatSchema = new Schema<IMessage>(
    {
        sender: { type: Schema.Types.ObjectId, ref: "User", required: true },
        room: { type: String, required: true }, // Room name (Web3Chat, NFTCommunity)
        message: { type: String, required: true },
        timestamp: { type: Date, default: Date.now },
    },
    { timestamps: true }
);

// Export Model
export default mongoose.model<IMessage>("Chat", chatSchema);
const userSchema: Schema<IUser> = new Schema<IUser>(
    {
        username: { type: String, unique: true, sparse: true },
        email: { type: String, required: false, unique: true, sparse: true },
        password: { type: String, required: false, default: null },
        isVerified: { type: Boolean, required: false, default: false },
        role: { type: [String], enum: Object.values(Roles), default: [Roles.BUYER] },
        walletAddress: { type: String, unique: true, sparse: true, required: false, default: null },
        refreshToken: { type: String, default: null },
        history: [
            {
                paid: { type: Number, default: 0 },
                item: { type: Schema.Types.ObjectId, ref: "Product" },
                timestamp: { type: Date, default: Date.now },
                transactionHash: { type: String, default: null },
            },
        ],
        joinedRooms: [{ type: String }], // Track rooms the user has joined
    },
    { timestamps: true }
);
import Chat from "../models/chatModel"; // Import Chat Schema

socket.on("groupMessage", async ({ roomName, message, userId }) => {
    const newMessage = new Chat({
        sender: userId, // User's ID
        room: roomName, // Room name
        message: message,
    });

    await newMessage.save(); // Save to MongoDB

    // Broadcast message to the room
    io.to(roomName).emit("message", {
        sender: userId,
        text: message,
    });
});
