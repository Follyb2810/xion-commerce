import mongoose, { Schema, Document } from "mongoose";

// Interface for private chat rooms
interface IChatRoom extends Document {
    name: string; // Room name
    isPrivate: boolean; // True for private rooms
    allowedUsers: mongoose.Types.ObjectId[]; // Users allowed in this room
}

// Schema for private chat rooms
const chatRoomSchema = new Schema<IChatRoom>(
    {
        name: { type: String, unique: true, required: true },
        isPrivate: { type: Boolean, default: false }, // Mark room as private or public
        allowedUsers: [{ type: Schema.Types.ObjectId, ref: "User" }], // Only these users can enter
    },
    { timestamps: true }
);

export default mongoose.model<IChatRoom>("ChatRoom", chatRoomSchema);
import ChatRoom from "../models/chatRoomModel"; // Import chat room schema

io.on("connection", (socket) => {
    console.log(`User connected: ${socket.id}`);

    socket.on("joinRoom", async ({ roomName, userId }) => {
        try {
            const room = await ChatRoom.findOne({ name: roomName });

            if (!room) {
                return socket.emit("error", { message: "Room not found" });
            }

            if (room.isPrivate && !room.allowedUsers.includes(userId)) {
                return socket.emit("error", { message: "Access denied. Private room." });
            }

            socket.join(roomName);
            console.log(`User ${userId} joined room: ${roomName}`);

            io.to(roomName).emit("message", {
                sender: "System",
                text: `User ${userId} has joined the room`,
            });
        } catch (error) {
            console.error("Error joining room:", error);
            socket.emit("error", { message: "An error occurred" });
        }
    });

    socket.on("sendMessage", ({ roomName, userId, message }) => {
        io.to(roomName).emit("message", {
            sender: userId,
            text: message,
        });
    });
});
const newRoom = new ChatRoom({
    name: "VIP-Traders",
    isPrivate: true,
    allowedUsers: ["65123abc1234", "65123def5678"], // Only these users can enter
});

await newRoom.save();
console.log("Private room created!");
socket.emit("joinRoom", { roomName: "VIP-Traders", userId: "65123abc1234" });
import mongoose, { Schema, Document } from "mongoose";

interface IChatRoom extends Document {
    name: string;
    isPrivate: boolean;
    allowedUsers: mongoose.Types.ObjectId[]; // Store allowed users by ID
}

const chatRoomSchema = new Schema<IChatRoom>(
    {
        name: { type: String, unique: true, required: true },
        isPrivate: { type: Boolean, default: false },
        allowedUsers: [{ type: Schema.Types.ObjectId, ref: "User" }], // Only these users can join
    },
    { timestamps: true }
);

export default mongoose.model<IChatRoom>("ChatRoom", chatRoomSchema);
import ChatRoom from "../models/chatRoomModel"; // Import the chat room model

io.on("connection", (socket) => {
    console.log(`User connected: ${socket.id}`);

    // ðŸ’¬ User requests to join a private room
    socket.on("joinRoom", async ({ roomName, userId }) => {
        try {
            const room = await ChatRoom.findOne({ name: roomName });

            if (!room) {
                return socket.emit("error", { message: "Room not found" });
            }

            if (room.isPrivate && !room.allowedUsers.includes(userId)) {
                return socket.emit("error", { message: "Access denied. Private room." });
            }

            socket.join(roomName);
            console.log(`User ${userId} joined room: ${roomName}`);

            io.to(roomName).emit("message", {
                sender: "System",
                text: `User ${userId} has joined the room.`,
            });
        } catch (error) {
            console.error("Error joining room:", error);
            socket.emit("error", { message: "An error occurred" });
        }
    });

    // ðŸ’¬ Sending a message in a private room
    socket.on("sendMessage", async ({ roomName, userId, message }) => {
        try {
            const room = await ChatRoom.findOne({ name: roomName });

            if (!room || !room.allowedUsers.includes(userId)) {
                return socket.emit("error", { message: "You are not allowed to send messages in this room." });
            }

            io.to(roomName).emit("message", {
                sender: userId,
                text: message,
            });
        } catch (error) {
            console.error("Error sending message:", error);
            socket.emit("error", { message: "An error occurred" });
        }
    });
});
const newRoom = new ChatRoom({
    name: "VIP-Traders",
    isPrivate: true,
    allowedUsers: ["65123abc1234", "65123def5678"], // Add user IDs here
});

await newRoom.save();
console.log("Private room created!");
import mongoose, { Schema, Document } from "mongoose";

export interface IUser extends Document {
    username: string;
    email: string;
    level: number; // User access level
}

const userSchema = new Schema<IUser>({
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    level: { type: Number, default: 1 }, // Default level is 1 (lowest)
});

export default mongoose.model<IUser>("User", userSchema);
export interface IChatRoom extends Document {
    name: string;
    isPrivate: boolean;
    minLevelRequired: number; // Minimum level to join
}

const chatRoomSchema = new Schema<IChatRoom>({
    name: { type: String, unique: true, required: true },
    isPrivate: { type: Boolean, default: false },
    minLevelRequired: { type: Number, default: 1 }, // Default: anyone can join
});

export default mongoose.model<IChatRoom>("ChatRoom", chatRoomSchema);
import ChatRoom from "../models/chatRoomModel";
import User from "../models/userModel";

io.on("connection", (socket) => {
    console.log(`User connected: ${socket.id}`);

    // ðŸ’¬ User requests to join a private room
    socket.on("joinRoom", async ({ roomName, userId }) => {
        try {
            const room = await ChatRoom.findOne({ name: roomName });
            const user = await User.findById(userId);

            if (!room) {
                return socket.emit("error", { message: "Room not found" });
            }

            if (!user) {
                return socket.emit("error", { message: "User not found" });
            }

            // âœ… Check if the user's level is high enough
            if (room.isPrivate && user.level < room.minLevelRequired) {
                return socket.emit("error", { message: `Access denied. Minimum level required: ${room.minLevelRequired}` });
            }

            // âœ… Allow the user to join the room
            socket.join(roomName);
            console.log(`User ${user.username} (Level ${user.level}) joined room: ${roomName}`);

            io.to(roomName).emit("message", {
                sender: "System",
                text: `User ${user.username} has joined the room.`,
            });
        } catch (error) {
            console.error("Error joining room:", error);
            socket.emit("error", { message: "An error occurred" });
        }
    });
});
const vipRoom = new ChatRoom({
    name: "VIP-Traders",
    isPrivate: true,
    minLevelRequired: 3, // Only users with level 3 or higher can join
});

await vipRoom.save();
console.log("VIP-Traders room created with Level 3+ access!");
socket.emit("joinRoom", { roomName: "VIP-Traders", userId: "65123abc1234" });
