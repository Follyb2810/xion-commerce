//?  product

//   const publicIds = product.image_of_land?.map(url => CloudinaryService.extractPublicId(url)).filter(Boolean) as string[];
//   if (publicIds.length > 0) await CloudinaryService.removeMultipleImages(publicIds);
//     const newImagePath = files.image_of_land[0].path;
//     const newImagePath = files.image_of_land[0].path;
//     const imageUpload = await CloudinaryService.uploadSingleImage(newImagePath);
//     if (product.image_of_land) await CloudinaryService.removeSingleImage(product.image_of_land);
// image_of_land: newImageUrls

//!

//
//   const originalImagePath = files.image_of_land[0].path;

// // Process image with Sharp utility
// const processedImagePath = await processImageWithSharp(originalImagePath);

// // Upload processed image to Cloudinary
// const imageUpload = await CloudinaryService.uploadSingleImage(processedImagePath);

// // Remove previous image if exists
// if (product.image_of_land) {
//   await CloudinaryService.removeSingleImage(product.image_of_land);
// }

// // Clean up processed file
// await fs.unlink(processedImagePath);

// // Save new image URL
// await ProductRepository.updateById(req.params.productId, {
//   image_of_land: imageUpload.secure_url,
// });

//
//!

//   const userId = String(req._id);
//   const userRoles = req.roles || [];
//   const sellerId = String(product.seller._id);
//   const sellerRole = (product.seller as IUser).role;

//   const isOwner = userId === sellerId;
//   const isAdmin = userRoles.includes(Roles.ADMIN);
//   const isSuperAdmin = userRoles.includes(Roles.SUPER_ADMIN);

//   const canDelete =
//     isOwner ||
//     isSuperAdmin ||
//     (isAdmin && sellerRole === Roles.SELLER); // Admins can only delete sellers' products

//   if (!canDelete) {
//     return ErrorHandler(res, "UNAUTHORIZED", 403);
//   }
//!

//? Process and upload images
// const processedImagePaths = await Promise.all(
//   imageFiles.map(file => processImageWithSharp(file.path))
// );

// const imageUploads = await CloudinaryService.uploadMultipleImages(processedImagePaths);
// const imageUrls = imageUploads.map(upload => upload.secure_url);

// // Cleanup processed temp files
// await Promise.all(processedImagePaths.map(path => fs.unlink(path)));

// // Upload document
// const documentUpload = files.document_of_land
//   ? await CloudinaryService.uploadPdfFile(files.document_of_land[0].path)
//   : null;

// const newProduct = await ProductRepository.create({
//   title,
//   description,
//   price,
//   category,
//   seller: new Types.ObjectId(req._id),
//   stock,
//   address,
//   mapping_location: mappingLocation,
//   image_of_land: imageUrls,
//   size_of_land,
//   document_of_land: documentUpload?.secure_url || ""
// });
//! permission
//  const isOwner = String(product.seller._id) === String(req._id);
//   const isAdmin = req.roles?.includes(Roles.ADMIN) || req.roles?.includes(Roles.SUPER_ADMIN);

//   if (!isOwner && !isAdmin) return ErrorHandler(res, "Unauthorized", 403);

//!
//   const userId = String(req._id);
//   const userRoles = req.roles || [];
//   const sellerId = String(product.seller._id);
//   const sellerRole = (product.seller as IUser).role;

//   const isOwner = userId === sellerId;
//   const isAdmin = userRoles.includes(Roles.ADMIN);
//   const isSuperAdmin = userRoles.includes(Roles.SUPER_ADMIN);

//   // Permissions logic
//   const canDelete =
//     isOwner ||
//     isSuperAdmin ||
//     (isAdmin && sellerRole === Roles.SELLER); // Admin can only delete SELLER images

//   if (!canDelete) {
//     return ErrorHandler(res, "Unauthorized", 403);
//   }
//!v
// export const likeProduct = async (req: Request, res: Response) => {
//   try {
//     const productId = req.params.id;
//     const userId = req.user._id; // assuming middleware sets `req.user`

//     const product = await Product.findById(productId);
//     if (!product) return res.status(404).json({ message: "Product not found" });

//     if (product.likes.includes(userId)) {
//       return res.status(400).json({ message: "You already liked this product." });
//     }

//     product.likes.push(userId);
//     await product.save();

//     res.status(200).json({ message: "Product liked successfully", likes: product.likes.length });
//   } catch (err) {
//     res.status(500).json({ message: "Server error", error: err });
//   }
// };

// export const toggleLike = async (req: Request, res: Response) => {
//   try {
//     const productId = req.params.id;

//     // If authenticated user exists
//     const identifier = req.user?._id?.toString() || req.ip;

//     const product = await Product.findById(productId);
//     if (!product) return res.status(404).json({ message: "Product not found" });

//     const alreadyLiked = product.likedBy.some((id) => id.toString() === identifier);

//     if (alreadyLiked) {
//       // Unlike
//       product.likedBy = product.likedBy.filter((id) => id.toString() !== identifier);
//       product.likeCount = Math.max(product.likeCount - 1, 0);
//       await product.save();
//       return res.status(200).json({ message: "Unliked", likeCount: product.likeCount });
//     } else {
//       // Like
//       product.likedBy.push(identifier);
//       product.likeCount += 1;
//       await product.save();
//       return res.status(200).json({ message: "Liked", likeCount: product.likeCount });
//     }
//   } catch (error) {
//     res.status(500).json({ message: "Error toggling like", error });
//   }
// };
// router.post("/product/:id/like", toggleLike);
// const toggleLike = async (id) => {
//   const res = await fetch(`/api/product/${id}/like`, { method: "POST" });
//   const data = await res.json();
//   console.log(data.message, "Current likes:", data.likeCount);
// };
